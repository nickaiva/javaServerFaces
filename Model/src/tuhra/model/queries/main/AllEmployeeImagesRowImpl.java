package tuhra.model.queries.main;

import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;

import tuhra.model.framework.TuhraEntityImpl;
import tuhra.model.framework.TuhraViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Feb 13 09:40:04 EET 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllEmployeeImagesRowImpl extends TuhraViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AssociatedId {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getAssociatedId();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setAssociatedId((Number)value);
            }
        }
        ,
        DefaultImage {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getDefaultImage();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setDefaultImage((String)value);
            }
        }
        ,
        ImageId {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getImageId();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setImageId((Number)value);
            }
        }
        ,
        UsageType {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getUsageType();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setUsageType((String)value);
            }
        }
        ,
        Image {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getImage();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setImage((String)value);
            }
        }
        ,
        ImageId1 {
            public Object get(AllEmployeeImagesRowImpl obj) {
                return obj.getImageId1();
            }

            public void put(AllEmployeeImagesRowImpl obj, Object value) {
                obj.setImageId1((DBSequence)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AllEmployeeImagesRowImpl object);

        public abstract void put(AllEmployeeImagesRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ASSOCIATEDID = AttributesEnum.AssociatedId.index();
    public static final int DEFAULTIMAGE = AttributesEnum.DefaultImage.index();
    public static final int IMAGEID = AttributesEnum.ImageId.index();
    public static final int USAGETYPE = AttributesEnum.UsageType.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int IMAGEID1 = AttributesEnum.ImageId1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllEmployeeImagesRowImpl() {
    }

    /**
     * Gets EmployeeImageUsages entity object.
     * @return the EmployeeImageUsages
     */
    public TuhraEntityImpl getEmployeeImageUsages() {
        return (TuhraEntityImpl)getEntity(0);
    }

    /**
     * Gets Images entity object.
     * @return the Images
     */
    public TuhraEntityImpl getImages() {
        return (TuhraEntityImpl)getEntity(1);
    }

    /**
     * Gets the attribute value for ASSOCIATED_ID using the alias name AssociatedId.
     * @return the ASSOCIATED_ID
     */
    public Number getAssociatedId() {
        return (Number) getAttributeInternal(ASSOCIATEDID);
    }

    /**
     * Sets <code>value</code> as attribute value for ASSOCIATED_ID using the alias name AssociatedId.
     * @param value value to set the ASSOCIATED_ID
     */
    public void setAssociatedId(Number value) {
        setAttributeInternal(ASSOCIATEDID, value);
    }

    /**
     * Gets the attribute value for DEFAULT_IMAGE using the alias name DefaultImage.
     * @return the DEFAULT_IMAGE
     */
    public String getDefaultImage() {
        return (String) getAttributeInternal(DEFAULTIMAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for DEFAULT_IMAGE using the alias name DefaultImage.
     * @param value value to set the DEFAULT_IMAGE
     */
    public void setDefaultImage(String value) {
        setAttributeInternal(DEFAULTIMAGE, value);
    }

    /**
     * Gets the attribute value for IMAGE_ID using the alias name ImageId.
     * @return the IMAGE_ID
     */
    public Number getImageId() {
        return (Number) getAttributeInternal(IMAGEID);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_ID using the alias name ImageId.
     * @param value value to set the IMAGE_ID
     */
    public void setImageId(Number value) {
        setAttributeInternal(IMAGEID, value);
    }

    /**
     * Gets the attribute value for USAGE_TYPE using the alias name UsageType.
     * @return the USAGE_TYPE
     */
    public String getUsageType() {
        return (String) getAttributeInternal(USAGETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for USAGE_TYPE using the alias name UsageType.
     * @param value value to set the USAGE_TYPE
     */
    public void setUsageType(String value) {
        setAttributeInternal(USAGETYPE, value);
    }

    /**
     * Gets the attribute value for IMAGE using the alias name Image.
     * @return the IMAGE
     */
    public String getImage() {
        return (String) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE using the alias name Image.
     * @param value value to set the IMAGE
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for IMAGE_ID using the alias name ImageId1.
     * @return the IMAGE_ID
     */
    public DBSequence getImageId1() {
        return (DBSequence)getAttributeInternal(IMAGEID1);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_ID using the alias name ImageId1.
     * @param value value to set the IMAGE_ID
     */
    public void setImageId1(DBSequence value) {
        setAttributeInternal(IMAGEID1, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
