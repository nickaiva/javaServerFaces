package tuhra.model.entities;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.TransactionEvent;

import tuhra.model.framework.TuhraEntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Feb 13 10:03:07 EET 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImagesImpl extends TuhraEntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    public void postChanges(TransactionEvent e) {
        /* Only references if Image is NEW */
        RowSet newImageUsagesBeforePost = null;
        if (getPostState() == STATUS_NEW) {
            // Store the rowset of imageUsages related
            // to this new image before calling super
            newImageUsagesBeforePost = (RowSet)getImageUsages();
         }
        super.postChanges(e);
        if (newImageUsagesBeforePost != null) {
            adjustImageUsages(newImageUsagesBeforePost);
        }
    }

    private void adjustImageUsages(RowSet newImageUsagesBeforePost) {
    
        Number newFkValue = getImageId().getSequenceNumber();
        while (newImageUsagesBeforePost.hasNext()) {
            ImageUsagesImpl imageUsage =(ImageUsagesImpl) newImageUsagesBeforePost.next();
        imageUsage.setImageId(newFkValue);
        }
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ImageId {
            public Object get(ImagesImpl obj) {
                return obj.getImageId();
            }

            public void put(ImagesImpl obj, Object value) {
                obj.setImageId((DBSequence)value);
            }
        }
        ,
        Image {
            public Object get(ImagesImpl obj) {
                return obj.getImage();
            }

            public void put(ImagesImpl obj, Object value) {
                obj.setImage((String)value);
            }
        }
        ,
        ImageUsages {
            public Object get(ImagesImpl obj) {
                return obj.getImageUsages();
            }

            public void put(ImagesImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ImagesImpl object);

        public abstract void put(ImagesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IMAGEID = AttributesEnum.ImageId.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int IMAGEUSAGES = AttributesEnum.ImageUsages.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ImagesImpl() {
    }

    /**
     * Gets the attribute value for ImageId, using the alias name ImageId.
     * @return the ImageId
     */
    public DBSequence getImageId() {
        return (DBSequence)getAttributeInternal(IMAGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImageId.
     * @param value value to set the ImageId
     */
    public void setImageId(DBSequence value) {
        setAttributeInternal(IMAGEID, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the Image
     */
    public String getImage() {
        return (String)getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getImageUsages() {
        return (RowIterator)getAttributeInternal(IMAGEUSAGES);
    }

    /**
     * @param imageId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence imageId) {
        return new Key(new Object[]{imageId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("tuhra.model.entities.Images");
        }
        return mDefinitionObject;
    }
}
